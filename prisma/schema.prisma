generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String
  role          UserRole       @default(CASHIER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inventoryLogs InventoryLog[]
  transactions  Transaction[]
  notifications Notification[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  products    Product[]

  @@map("categories")
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String?
  sku              String            @unique
  price            Decimal           @db.Decimal(10, 2)
  cost             Decimal           @db.Decimal(10, 2)
  stock            Int               @default(0)
  minStock         Int               @default(5)
  categoryId       String
  image            String?
  barcode          String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  inventoryLogs    InventoryLog[]
  category         Category          @relation(fields: [categoryId], references: [id])
  transactionItems TransactionItem[]

  @@map("products")
}

model Transaction {
  id                String            @id @default(cuid())
  transactionNumber String            @unique
  totalAmount       Decimal           @db.Decimal(10, 2)
  taxAmount         Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  finalAmount       Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus     @default(PENDING)
  xenditPaymentId   String?
  xenditInvoiceUrl  String?
  cashierId         String
  createdAt         DateTime          @default(now())
  items             TransactionItem[]
  cashier           User              @relation(fields: [cashierId], references: [id])

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  unitPrice     Decimal     @db.Decimal(10, 2)
  totalPrice    Decimal     @db.Decimal(10, 2)
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@unique([transactionId, productId])
  @@map("transaction_items")
}

model InventoryLog {
  id            String           @id @default(cuid())
  productId     String
  type          InventoryLogType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  createdBy     String
  createdAt     DateTime         @default(now())
  user          User             @relation(fields: [createdBy], references: [id])
  product       Product          @relation(fields: [productId], references: [id])

  @@map("inventory_logs")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@map("notifications")
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  XENDIT_QRIS
  XENDIT_EWALLET
  XENDIT_VIRTUAL_ACCOUNT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

enum InventoryLogType {
  SALE
  RESTOCK
  ADJUSTMENT
  RETURN
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
